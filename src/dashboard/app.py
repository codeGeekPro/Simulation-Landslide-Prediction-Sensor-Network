import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import folium
from streamlit_folium import st_folium

st.set_page_config(page_title="Landslide IoT Dashboard", layout="wide")
st.title("üåç Landslide Prediction Sensor Network - Dashboard")

# Chargement des donn√©es simul√©es
def load_data():
    try:
        df = pd.read_csv('data/simulated_sensors.csv')
    except FileNotFoundError:
        st.error("Fichier de donn√©es non trouv√©. Veuillez lancer la simulation.")
        return None
    return df

data = load_data()
# Ajout du chargement des donn√©es satellites

def load_satellite_data():
    try:
        df = pd.read_csv('data/simulated_satellite.csv')
    except FileNotFoundError:
        st.warning("Fichier de donn√©es satellites non trouv√©. Veuillez lancer la simulation.")
        return None
    return df

sat_data = load_satellite_data()

if data is not None:
    st.subheader("Donn√©es capteurs (extrait)")
    st.dataframe(data.tail(10))

    # Simulation d'un mod√®le pr√©dictif simple
    X = data[['humidity', 'vibration', 'rainfall', 'temperature']]
    # G√©n√©ration de labels fictifs pour la d√©mo
    y = np.random.choice(['faible', 'moyen', '√©lev√©'], len(X))
    model = RandomForestClassifier(n_estimators=10, random_state=42)
    model.fit(X, y)
    data['risk_pred'] = model.predict(X)

    # Conversion explicite de la colonne 'risk_pred' en valeurs num√©riques pour l'affichage
    risk_map = {'faible': 0, 'moyen': 1, '√©lev√©': 2}
    data['risk_pred_num'] = data['risk_pred'].map(risk_map)

    st.subheader("Pr√©diction du risque de glissement de terrain")
    st.line_chart(
        data.set_index('timestamp')[['humidity', 'rainfall', 'risk_pred_num']],
        y=['humidity', 'rainfall', 'risk_pred_num']
    )

    st.write("**L√©gende risque** : faible (0, vert), moyen (1, orange), √©lev√© (2, rouge)")

    st.subheader("Distribution des niveaux de risque pr√©dits")
    st.bar_chart(data['risk_pred'].value_counts())

    st.subheader("Carte g√©ographique des points satellites")
    if sat_data is not None:
        m = folium.Map(location=[sat_data['latitude'].mean(), sat_data['longitude'].mean()], zoom_start=8)
        for _, row in sat_data.iterrows():
            folium.CircleMarker(
                location=[row['latitude'], row['longitude']],
                radius=5,
                popup=f"Humidit√©: {row['sat_humidity']:.1f}%\nPr√©cipitations: {row['sat_rainfall']:.1f}mm",
                color='blue',
                fill=True,
                fill_opacity=0.6
            ).add_to(m)
        st_folium(m, width=700, height=400)
    else:
        st.info("Veuillez d'abord g√©n√©rer les donn√©es satellites.")

    st.success("Simulation et pr√©visualisation termin√©es !")
else:
    st.info("Veuillez d'abord g√©n√©rer les donn√©es simul√©es.")
